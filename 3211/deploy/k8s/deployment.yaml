apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: anotherclass-321
  name: api-tester-3211
  labels:
    part-of: k8s-anotherclass
    component: backend-server
    name: api-tester
    instance: api-tester-3211
    version: 3.0.0
    managed-by: kubectl
spec:
  selector:
    matchLabels:
      part-of: k8s-anotherclass
      component: backend-server
      name: api-tester
      instance: api-tester-3211
  replicas: 1
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        part-of: k8s-anotherclass
        component: backend-server
        name: api-tester
        instance: api-tester-3211
        version: 3.0.0
    spec:
      serviceAccountName: api-tester-3211
      nodeSelector:
        # Pod를 배포할 node ###
        kubernetes.io/hostname: rocky-k8s-master
      containers:
        - name: api-tester-3211
          # 1pro는 본인의 dockerhub username으로 변경해 주세요.
          image: brandon9999/api-tester:3.0.0
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              name: http
          envFrom:
            - configMapRef:
                name: api-tester-3211-properties
          # env는 Pod에 환경변수를 주입함.
          env:
            - name: downward_env_pod-name
              valueFrom:
                fieldRef:
                  # Deployment에 의해 Pod가 생성되면 Pod의 metadata.name필드에 정보가 들어간다.
                  # 확인명령 : $ echo $downward_env_pod-name
                  fieldPath: metadata.name
            - name: downward_env_node-name
              valueFrom:
                fieldRef:
                  # Deployment에 의해 Pod가 생성되면 Pod의 spec.nodeName필드에 정보가 들어간다.
                  # 확인명령 : $ echo $downward_env_node-name
                  fieldPath: spec.nodeName
            - name: downward_env_pod-ip
              valueFrom:
                fieldRef:
                  # Deployment에 의해 Pod가 생성되면 Pod의 status.podIP필드에 정보가 들어간다.
                  # 확인명령 : $ echo $downward_env_pod-ip
                  fieldPath: status.podIP
          startupProbe:
            httpGet:
              path: "/startup"
              port: 8080
            periodSeconds: 5
            failureThreshold: 24
          readinessProbe:
            httpGet:
              path: "/readiness"
              port: 8080
            periodSeconds: 10
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: "/liveness"
              port: 8080
            periodSeconds: 10
            failureThreshold: 3
          resources:
            requests:
              memory: "100Mi"
              cpu: "100m"
            limits:
              memory: "200Mi"
              cpu: "200m"
          volumeMounts:
            - name: secret-datasource
              mountPath: /usr/src/myapp/datasource
            - name: downward-api-pod-info
              # downwardAPI방식에 의해 아래의 mount경로에 파일이 생성됨.
              # cat /usr/src/myapp/downward-api/metadata_labels
              # ...
              # part-of="k8s-anotherclass"
              # component="backend-server"  
              # ...
              # cat /usr/src/myapp/downward-api/metadata_annotations
              # ...
              # kubectl.kubernetes.io/last-applied-configuration=...
              # ...
              mountPath: /usr/src/myapp/downward-api
      volumes:
        - name: secret-datasource
          secret:
            secretName: api-tester-3211-postgresql
        - name: downward-api-pod-info
          # downwardAPI방식은 Pod내부로 정보를 파일로 주입하게 하는 방식임.
          downwardAPI:
            items:
              - path: "metadata_labels"
                fieldRef:
                  fieldPath: metadata.labels
              - path: "metadata_annotations"
                fieldRef:
                  fieldPath: metadata.annotations
